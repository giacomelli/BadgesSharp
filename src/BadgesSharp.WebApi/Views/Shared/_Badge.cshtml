@model BadgesSharp.WebApi.Models.BadgePageViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";

    Model.Badge = ViewContext.RouteData.Values["action"].ToString();
    Model.Title = Model.Badge.Translate();

    if(String.IsNullOrEmpty(Model.TeamCityReport)) 
    {
        Model.TeamCityReport = Model.Report;
    }

    var generateCommand = "BadgesSharpCmd -o [your GitHub username] -r [your GitHub repository] -a %GITHUB_REPO_TOKEN% -b " + Model.Badge + " -c " + Model.Report; 
    var generateTCCommand = "BadgesSharpCmd -o [your GitHub username] -r [your GitHub repository] -a %GITHUB_REPO_TOKEN% -b " + Model.Badge + " -c \"" + Model.TeamCityReport + "\""; 
}

<div class="jumbotron">
    <h2>@Model.Title</h2>
    <p class="lead">@Model.Description.</p>
    <p class="lead"><a href="@Model.Url">@Model.Url</a></p>
    <img src="https://badgessharp.apphb.com/badges/giacomelli/BadgesSharp/@Model.Badge" />
</div>
<h3>Install @Model.Title</h3>
@RenderSection("Install")

<h3>Run @Model.Title</h3>
<pre>@Model.RunCommand</pre>
<p>
    The report will be save to @Model.Report
</p>


<h3>Generate @Model.Title badge</h3>
<pre>@generateCommand</pre>

<h3>Show the badge at your GitHub repository</h3>
Edit your readme.md and add the line below:<br />

<pre>![@Model.Title](https://badgessharp.apphb.com/badges/:owner/:repo/@Model.Badge)</pre>

<h3>How use it on your Continuous Integration?</h3>
<h4>AppVeyor</h4>
<p>Add to your AppVeyor.yml file:</p>
<pre>after_build:
        - cmd: >
        @Model.RunCommand

        @generateCommand</pre>

<h4>TeamCity</h4>
<p>Add the '@Model.Title' step to your configuration (probably you already have it);</p>
<p>Add a final 'Command Line' step to your configuration:</p>
<ol>
    <li>Execute step: Even if some of the previous steps failed</li>
    <li>Run: Custom script</li>
    <li>Custom script:
        <pre>@generateTCCommand</pre>
</li>
</ol>


@RenderBody()