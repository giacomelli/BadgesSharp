<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Skahal.Infrastructure.Framework</name>
    </assembly>
    <members>
        <member name="T:Skahal.Infrastructure.Framework.Domain.EntityWithIdBase`1">
            <summary>
            A domain entity base class that use a strong Id property instead object Key as entity key.
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Domain.IEntity">
            <summary>
            Defines a basic interface for a domain entity.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Domain.IEntity.Key">
            <summary>
            Gets the id.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Domain.EntityWithIdBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Skahal.Infrastructure.Framework.Domain.EntityWithIdBase`1"/> class.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Domain.EntityWithIdBase`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Skahal.Infrastructure.Framework.Domain.EntityWithIdBase`1"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Domain.EntityWithIdBase`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Domain.EntityWithIdBase`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Domain.EntityWithIdBase`1.op_Equality(Skahal.Infrastructure.Framework.Domain.EntityWithIdBase{`0},Skahal.Infrastructure.Framework.Domain.EntityWithIdBase{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="base1">The base1.</param>
            <param name="base2">The base2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Domain.EntityWithIdBase`1.op_Inequality(Skahal.Infrastructure.Framework.Domain.EntityWithIdBase{`0},Skahal.Infrastructure.Framework.Domain.EntityWithIdBase{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="base1">The base1.</param>
            <param name="base2">The base2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Domain.EntityWithIdBase`1.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Domain.EntityWithIdBase`1.Skahal#Infrastructure#Framework#Domain#IEntity#Key">
            <summary>
            Gets the id.
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Logging.ConsoleLogStrategy">
            <summary>
            A log strategy that send the messages to default system console.
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Logging.LogStrategyBase">
            <summary>
            A base ILogStrategy implementation.
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Logging.ILogStrategy">
            <summary>
            Defines a interface for log strategies.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.ILogStrategy.WriteDebug(System.String,System.Object[])">
            <summary>
            Writes the debug log level message.
            </summary>
            <param name='message'>
            Message.
            </param>
            <param name='args'>
            Arguments.
            </param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.ILogStrategy.WriteWarning(System.String,System.Object[])">
            <summary>
            Writes the warning log level message.
            </summary>
            <param name='message'>
            Message.
            </param>
            <param name='args'>
            Arguments.
            </param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.ILogStrategy.WriteError(System.String,System.Object[])">
            <summary>
            Writes the error log level message.
            </summary>
            <param name='message'>
            Message.
            </param>
            <param name='args'>
            Arguments.
            </param>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Logging.ILogStrategy.DebugWritten">
            <summary>
            Occurs when a debug log is written.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Logging.ILogStrategy.WarningWritten">
            <summary>
            Occurs when a warning log is written.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Logging.ILogStrategy.ErrorWritten">
            <summary>
            Occurs when an error log is written.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.LogStrategyBase.WriteDebug(System.String,System.Object[])">
            <summary>
            Writes the debug log level message.
            </summary>
            <param name="message">Message.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.LogStrategyBase.WriteWarning(System.String,System.Object[])">
            <summary>
            Writes the warning log level message.
            </summary>
            <param name="message">Message.</param>
            <param name="args">Arguments.</param>
            <returns>The warning.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.LogStrategyBase.WriteError(System.String,System.Object[])">
            <summary>
            Writes the error log level message.
            </summary>
            <param name="message">Message.</param>
            <param name="args">Arguments.</param>
            <returns>The error.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.LogStrategyBase.OnDebugWritten(Skahal.Infrastructure.Framework.Logging.LogWrittenEventArgs)">
            <summary>
            Raises the debug written event.
            </summary>
            <param name="e">The arguments.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.LogStrategyBase.OnWarningWritten(Skahal.Infrastructure.Framework.Logging.LogWrittenEventArgs)">
            <summary>
            Raises the warning written event.
            </summary>
            <param name="e">The arguments.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.LogStrategyBase.OnErrorWritten(Skahal.Infrastructure.Framework.Logging.LogWrittenEventArgs)">
            <summary>
            Raises the error written event.
            </summary>
            <param name="e">The arguments.</param>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Logging.LogStrategyBase.DebugWritten">
            <summary>
            Occurs when a debug log is written.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Logging.LogStrategyBase.WarningWritten">
            <summary>
            Occurs when a warning log is written.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Logging.LogStrategyBase.ErrorWritten">
            <summary>
            Occurs when an error log is written.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.ConsoleLogStrategy.WriteDebug(System.String,System.Object[])">
            <summary>
            Writes the debug log level message.
            </summary>
            <param name="message">Message.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.ConsoleLogStrategy.WriteWarning(System.String,System.Object[])">
            <summary>
            Writes the warning log level message.
            </summary>
            <param name="message">Message.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.ConsoleLogStrategy.WriteError(System.String,System.Object[])">
            <summary>
            Writes the error log level message.
            </summary>
            <param name="message">Message.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Net.Messaging.DisconnectedEventArgs">
            <summary>
            Disconnected event arguments.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Net.Messaging.DisconnectedEventArgs.#ctor(Skahal.Infrastructure.Framework.Net.Messaging.DisconnectionReason)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Skahal.Infrastructure.Framework.Net.Messaging.DisconnectedEventArgs"/> class.
            </summary>
            <param name="reason">Reason.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Net.Messaging.DisconnectedEventArgs.Reason">
            <summary>
            Gets the reason.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Net.Messaging.MessengerState">
            <summary>
            Messenger state.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Net.Messaging.MessengerState.Connected">
            <summary>
            Messenger is connected.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Net.Messaging.MessengerState.Disconnected">
            <summary>
            Messenger is disconnected
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Net.Messaging.DisconnectionReason">
            <summary>
            Disconnection reason.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Net.Messaging.DisconnectionReason.ConnectionLost">
            <summary>
            Disconnected  by a connection lost.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Net.Messaging.DisconnectionReason.LocalQuit">
            <summary>
            Disconnected by current messenger quit.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Net.Messaging.DisconnectionReason.RemoteQuit">
            <summary>
            Disconnected by remote messenger quit.
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Net.Messaging.IMessenger">
            <summary>
            Defines the interface for a basic messenger.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Net.Messaging.IMessenger.Connect">
            <summary>
            Connect the messenger.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Net.Messaging.IMessenger.SendMessage(System.String,System.String)">
            <summary>
            Sends the message.
            </summary>
            <param name="name">The message name.</param>
            <param name="value">The message value.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Net.Messaging.IMessenger.Disconnect">
            <summary>
            Disconnect the messenger.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Net.Messaging.IMessenger.Connected">
            <summary>
            Occurs when connected.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Net.Messaging.IMessenger.MessageSent">
            <summary>
            Occurs when message was sent.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Net.Messaging.IMessenger.MessageReceived">
            <summary>
            Occurs when message received.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Net.Messaging.IMessenger.Disconnected">
            <summary>
            Occurs when disconnected.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Net.Messaging.IMessenger.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Net.Messaging.IMessenger.CanReceiveMessages">
            <summary>
            Gets or sets a value indicating whether this instance can receive messages.
            </summary>
            <value><c>true</c> if this instance can receive messages; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Net.Messaging.Message">
            <summary>
            Represents a message.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Net.Messaging.Message.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Skahal.Infrastructure.Framework.Net.Messaging.Message"/> class.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Net.Messaging.Message.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Skahal.Infrastructure.Framework.Net.Messaging.Message"/> class.
            </summary>
            <param name="name">The message name.</param>
            <param name="value">The message value.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Net.Messaging.Message.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Net.Messaging.Message.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Net.Messaging.MessageConverter">
            <summary>
            A message converter helper.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Net.Messaging.MessageConverter.FieldsSeparator">
            <summary>
            The fields separator in a message value.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Net.Messaging.MessageConverter.ToString(System.String,System.String)">
            <summary>
            Converts the message to a string.
            </summary>
            <returns>The string.</returns>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Net.Messaging.MessageConverter.ToMessage(System.String)">
            <summary>
            Converts the string to a Message.
            </summary>
            <returns>The message.</returns>
            <param name="messageAsString">Message as string.</param>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Net.Messaging.MessengerBase">
            <summary>
            The base class for IMessenger's
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Net.Messaging.MessengerBase.DisconnectMessageName">
            <summary>
            The name of the disconnect message.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Net.Messaging.MessengerBase.DisconnectMessageQuitValue">
            <summary>
            The disconnect message quit value.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Net.Messaging.MessengerBase.m_messagesReceivedBuffer">
            <summary>
            The messages received buffer.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Net.Messaging.MessengerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Skahal.Infrastructure.Framework.Net.Messaging.MessengerBase"/> class.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Net.Messaging.MessengerBase.Connect">
            <summary>
            Connect the messenger.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Net.Messaging.MessengerBase.SendMessage(System.String,System.String)">
            <summary>
            Sends the message.
            </summary>
            <param name="name">The message name.</param>
            <param name="value">The message value.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Net.Messaging.MessengerBase.PerformSendMessage(System.String,System.String)">
            <summary>
            Performs the send message.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Net.Messaging.MessengerBase.Disconnect">
            <summary>
            Disconnect the messenger.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Net.Messaging.MessengerBase.PerformDisconnect">
            <summary>
            Performs the disconnect.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Net.Messaging.MessengerBase.OnConnected(Skahal.Infrastructure.Framework.Net.Messaging.ConnectedEventArgs)">
            <summary>
            Raises the connected event.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Net.Messaging.MessengerBase.OnMessageReceived(Skahal.Infrastructure.Framework.Net.Messaging.MessageEventArgs)">
            <summary>
            Raises the message received event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Net.Messaging.MessengerBase.OnDisconnected(Skahal.Infrastructure.Framework.Net.Messaging.DisconnectedEventArgs)">
            <summary>
            Raises the disconnected event.
            </summary>
            <param name="e">The event argumetns</param>    
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Net.Messaging.MessengerBase.Connected">
            <summary>
            Occurs when connected.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Net.Messaging.MessengerBase.MessageSent">
            <summary>
            Occurs when message was sent.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Net.Messaging.MessengerBase.MessageReceived">
            <summary>
            Occurs when message received.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Net.Messaging.MessengerBase.Disconnected">
            <summary>
            Occurs when disconnected.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Net.Messaging.MessengerBase.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Net.Messaging.MessengerBase.CanReceiveMessages">
            <summary>
            Gets or sets a value indicating whether this instance can receive messages.
            </summary>
            <value><c>true</c> if this instance can receive messages; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Commons.EventHandlerExtensions">
            <summary>
            Extensions methods for EventHandler.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Commons.EventHandlerExtensions.Raise(System.EventHandler,System.Object)">
            <summary>
            Raise event.
            </summary>
            <param name='handler'>
            Handler.
            </param>
            <param name='sender'>
            Sender.
            </param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Commons.EventHandlerExtensions.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raise the event.
            </summary>
            <param name='handler'>
            Handler.
            </param>
            <param name='sender'>
            Sender.
            </param>
            <param name='e'>
            E.
            </param>
            <typeparam name='TEventArgs'>
            The 1st type parameter.
            </typeparam>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Net.Messaging.MessageEventArgs">
            <summary>
            Message received event arguments.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Net.Messaging.MessageEventArgs.#ctor(Skahal.Infrastructure.Framework.Net.Messaging.Message)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Skahal.Infrastructure.Framework.Net.Messaging.MessageEventArgs"/> class.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Net.Messaging.MessageEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Skahal.Infrastructure.Framework.Net.Messaging.MessageEventArgs"/> class.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Net.Messaging.MessageEventArgs.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Commons.DependencyService">
            <summary>
            Infrastructure service for dependency injection.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Commons.DependencyService.Register``1(System.Func{System.Object})">
            <summary>
            Register the specified type implementation.
            </summary>
            <param name="CreateImplementation">Create implementation.</param>
            <typeparam name="TType">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Commons.DependencyService.Register``1(System.Func{System.Object,System.Object})">
            <summary>
            Register the specified type implementation.
            </summary>
            <param name="CreateImplementation">Create implementation.</param>
            <typeparam name="TType">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Commons.DependencyService.Register``1(System.Object)">
            <summary>
            Register the specified type instance.
            </summary>
            <param name="implementationInstance">Implementation instance.</param>
            <typeparam name="TType">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Commons.DependencyService.Create``1(System.Object)">
            <summary>
            Create this instance for type specified.
            </summary>
            <param name="constructorArgument">The argument for constructor.M</param>
            <typeparam name="TType">The 1st type parameter.</typeparam>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Logging.LogWrittenEventArgs">
            <summary>
            SH log written event arguments.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.LogWrittenEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Skahal.Infrastructure.Framework.Logging.LogWrittenEventArgs"/> class.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.LogWrittenEventArgs.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Skahal.Infrastructure.Framework.Logging.LogWrittenEventArgs"/> class.
            </summary>
            <param name="message">Message.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Logging.LogWrittenEventArgs.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Logging.LogLevel">
            <summary>
            Log level.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Logging.LogLevel.Debug">
            <summary>
            The debug log level.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Logging.LogLevel.Warning">
            <summary>
            The warning log level.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Logging.LogLevel.Error">
            <summary>
            The error log level.
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Logging.LogService">
            <summary>
            A central point to organize logs.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Logging.LogService.s_logStrategy">
            <summary>
            The log strategy.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Logging.LogService.s_filtrableLogStrategy">
            <summary>
            The log strategy used to applied filters.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.LogService.Initialize(Skahal.Infrastructure.Framework.Logging.ILogStrategy)">
            <summary>
            Initialize the service.
            </summary>
            <param name="logStrategy">Log strategy.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.LogService.ApplyFilter(System.Func{Skahal.Infrastructure.Framework.Logging.LogMessage,System.Boolean})">
            <summary>
            Applies the filter.
            </summary>
            <param name="filter">Filter.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.LogService.Debug(System.String,System.Object[])">
            <summary>
            Write a debug log level.
            </summary>
            <param name='message'>
            Message.
            </param>
            <param name='args'>
            Arguments.
            </param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.LogService.Warning(System.String,System.Object[])">
            <summary>
            Write a warning log level.
            </summary>
            <param name='message'>
            Message.
            </param>
            <param name='args'>
            Arguments.
            </param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.LogService.Error(System.String,System.Object[])">
            <summary>
            Write an error log level.
            </summary>
            <param name='message'>
            Message.
            </param>
            <param name='args'>
            Arguments.
            </param>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Logging.LogService.DebugWritten">
            <summary>
            Occurs when a debug log is written.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Logging.LogService.WarningWritten">
            <summary>
            Occurs when a warning log is written.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Logging.LogService.ErrorWritten">
            <summary>
            Occurs when a error log is written.
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Configuration.BootstrapperBase">
            <summary>
            The framework bootstrapper.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Configuration.BootstrapperBase.CreateLogStrategy">
            <summary>
            Creates the log strategy.
            </summary>
            <returns>The log strategy.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Configuration.BootstrapperBase.CreateUserRepository">
            <summary>
            Creates the user repository.
            </summary>
            <returns>The user repository.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Configuration.BootstrapperBase.CreateAppStrategy">
            <summary>
            Creates the app strategy.
            </summary>
            <returns>The app strategy.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Configuration.BootstrapperBase.CreateGlobalizationLabelRepository">
            <summary>
            Creates the globalization label repository.
            </summary>
            <returns>The globalization label repository.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Configuration.BootstrapperBase.Setup">
            <summary>
            Setup this instance.
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Domain.IAggregateRoot">
            <summary>
            The markup interface for a aggregate root.
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Domain.EntityBase">
            <summary>
            A domain entity base class.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Domain.EntityBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:Skahal.Infrastructure.Framework.Domain.EntityBase&lt;TKey&gt;"/> class.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Domain.EntityBase.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="!:Skahal.Infrastructure.Framework.Domain.EntityBase&lt;TKey&gt;"/> class.
            </summary>
            <param name="key">Key.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Domain.EntityBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Domain.EntityBase.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Domain.EntityBase.op_Equality(Skahal.Infrastructure.Framework.Domain.EntityBase,Skahal.Infrastructure.Framework.Domain.EntityBase)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="base1">The base1.</param>
            <param name="base2">The base2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Domain.EntityBase.op_Inequality(Skahal.Infrastructure.Framework.Domain.EntityBase,Skahal.Infrastructure.Framework.Domain.EntityBase)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="base1">The base1.</param>
            <param name="base2">The base2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Domain.EntityBase.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Pooling.PoolService">
            <summary>
            Pool service.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Pooling.PoolService.GetItem(System.String)">
            <summary>
            Gets the item.
            </summary>
            <returns>The item.</returns>
            <param name="poolName">Pool name.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Pooling.PoolService.GetItem``1(System.String)">
            <summary>
            Gets the item.
            </summary>
            <returns>The item.</returns>
            <param name="poolName">Pool name.</param>
            <typeparam name="TItem">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Pooling.PoolService.ReleaseItem(System.String,System.Object)">
            <summary>
            Releases the item.
            </summary>
            <param name="poolName">Pool name.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Pooling.PoolService.ReleaseAll(System.Func{System.Object,System.Boolean})">
            <summary>
            Releases all items in all pools that fit in release filter specified.
            </summary>
            <param name='releaseFilter'>
            Release filter.
            </param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Pooling.PoolService.ReleaseAll">
            <summary>
            Releases all items in all pools.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Pooling.PoolService.GetAllPools">
            <summary>
            Gets all available pools.
            </summary>
            <returns>The all pools.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Pooling.PoolService.RegisterPool(Skahal.Infrastructure.Framework.Pooling.IPool)">
            <summary>
            Registers the pool.
            </summary>
            <param name="pool">Pool.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Pooling.PoolService.UnregisterAllPools">
            <summary>
            Unregisters all pools.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Pooling.PoolService.GetPool(System.String)">
            <summary>
            Gets the pool.
            </summary>
            <returns>The pool.</returns>
            <param name="poolName">Pool name.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Pooling.PoolService.PoolsCount">
            <summary>
            Gets the pools count.
            </summary>
            <value>The pools count.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Pooling.IPool">
            <summary>
            Defines an interface for a pool.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Pooling.IPool.CreateItems">
            <summary>
            Creates the items.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Pooling.IPool.GetItem">
            <summary>
            Gets the item.
            </summary>
            <returns>The item.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Pooling.IPool.ReleaseItem(System.Object)">
            <summary>
            Releases the item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Pooling.IPool.ReleaseAll(System.Func{System.Object,System.Boolean})">
            <summary>
            Releases all items that fit in release filter specified.
            </summary>
            <param name='releaseFilter'>
            Release filter.
            </param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Pooling.IPool.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Pooling.IPool.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Pooling.IPool.IsFixedSize">
            <summary>
            Gets or sets a value indicating whether this instance is fixed size.
            </summary>
            <value><c>true</c> if this instance is fixed size; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Pooling.IPool.AutoDisableTime">
            <summary>
            Gets or sets the auto disable time.
            </summary>
            <value>The auto disable time.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Pooling.IPool.ItemsCount">
            <summary>
            Gets the items count.
            </summary>
            <value>The items count.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Pooling.PoolBase">
            <summary>
            A Pool base class.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Pooling.PoolBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Skahal.Infrastructure.Framework.Pooling.PoolBase"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Pooling.PoolBase.CreateItems">
            <summary>
            Creates the items.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Pooling.PoolBase.GetItem">
            <summary>
            Gets the item.
            </summary>
            <returns>The item.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Pooling.PoolBase.ReleaseItem(System.Object)">
            <summary>
            Releases the item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Pooling.PoolBase.ReleaseAll(System.Func{System.Object,System.Boolean})">
            <summary>
            Releases all items that fit in release filter specified.
            </summary>
            <param name="releaseFilter">Release filter.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Pooling.PoolBase.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Pooling.PoolBase.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Pooling.PoolBase.IsFixedSize">
            <summary>
            Gets or sets a value indicating whether this instance is fixed size.
            </summary>
            <value>true</value>
            <c>false</c>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Pooling.PoolBase.AutoDisableTime">
            <summary>
            Gets or sets the auto disable time.
            </summary>
            <value>The auto disable time.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Pooling.PoolBase.ItemsCount">
            <summary>
            Gets the items count.
            </summary>
            <value>The items count.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Globalization.GlobalizationService">
            <summary>
            Globalization service.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Globalization.GlobalizationService.PtBrCultureInfo">
            <summary>
            Brazilian Portugues culture information.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Globalization.GlobalizationService.EnUsCultureInfo">
            <summary>
            United States English culture information.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Globalization.GlobalizationService.Initialize(Skahal.Infrastructure.Framework.Globalization.IGlobalizationLabelRepository)">
            <summary>
            Initialize the service.
            </summary>
            <param name="labelRepository">Label repository.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Globalization.GlobalizationService.ChangeCulture(System.String)">
            <summary>
            Changes the culture.
            </summary>
            <param name="cultureName">Culture name.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Globalization.GlobalizationService.ChangeCulture(System.Globalization.CultureInfo)">
            <summary>
            Changes the culture.
            </summary>
            <param name="toCulture">To culture.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Globalization.GlobalizationService.Translate(System.String)">
            <summary>
            Translate the specified english text to current culture.
            </summary>
            <param name="englishText">English text.</param>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Globalization.GlobalizationService.CultureChanged">
            <summary>
            Occurs when culture changed.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Globalization.GlobalizationService.CurrentCulture">
            <summary>
            Gets the current culture.
            </summary>
            <value>The current culture.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.People.UserPreference">
            <summary>
            Represents an user preference.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.People.UserPreference.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.People.UserPreference.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.People.UserPreference.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.People.User">
            <summary>
            Represents a user.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.People.User.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Skahal.Infrastructure.Framework.People.User"/> class.
            <remarks>
            The entity will receive a new and unique key.
            </remarks>
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.People.User.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Skahal.Infrastructure.Framework.People.User"/> class.
            </summary>
            <param name="key">The entity key.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.People.User.GetPreference(System.String)">
            <summary>
            Gets a preference by name.
            </summary>
            <returns>The preference by name.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.People.User.GetPreferenceValue``1(System.String)">
            <summary>
            Gets a preference value by prefence name.
            </summary>
            <returns>The preference value.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.People.User.GetPreference(System.String,System.Object)">
            <summary>
            Gets a preference by name.
            </summary>
            <returns>The preference by name.</returns>
            <param name="name">Name.</param>
            <param name="defaultValue">A default value in the case the preference does not exists.</param> 
        </member>
        <member name="M:Skahal.Infrastructure.Framework.People.User.GetPreferenceValue``1(System.String,``0)">
            <summary>
            Gets a preference value by preference name.
            </summary>
            <returns>The preference value.</returns>
            <param name="name">Name.</param>
            <param name="defaultValue">A default value in the case the preference does not exists.</param> 
        </member>
        <member name="M:Skahal.Infrastructure.Framework.People.User.HasPreference(System.String)">
            <summary>
            Determines whether this instance has preference with the specified name.
            </summary>
            <returns><c>true</c> if this instance has preference with the specified name; otherwise, <c>false</c>.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.People.User.SetPreference(System.String,System.Object)">
            <summary>
            Sets the preference.
            </summary>
            <returns><c>true</c>, if was set a new preference (there is no preference with the specified name before), <c>false</c> otherwise.</returns>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.People.User.RemoteKey">
            <summary>
            Gets or sets the remote id.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.People.User.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.People.User.Preferences">
            <summary>
            Gets the preferences.
            </summary>
            <value>The preferences.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.People.UserService">
            <summary>
            Infrastructure framework user service.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.People.UserService.Initialize(Skahal.Infrastructure.Framework.People.IUserRepository)">
            <summary>
            Initialize the services.
            </summary>
            <param name="userRepository">User repository.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.People.UserService.GetCurrentUser">
            <summary>
            Gets the current user.
            </summary>
            <returns>The current user.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.People.UserService.SaveCurrentUser(Skahal.Infrastructure.Framework.People.User)">
            <summary>
            Sets the current user.
            </summary>
            <param name="user">User.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.People.UserService.HasPreference(System.String)">
            <summary>
            Determines if the current user has the preference.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.People.UserService.SetPreference(System.String,System.Object)">
            <summary>
            Sets the preference for current user.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.People.UserService.GetPreference(System.String)">
            <summary>
            Gets the preference for current user.
            </summary>
            <returns>The preference.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.People.UserService.GetPreferenceValue``1(System.String)">
            <summary>
            Gets the preference value for current user.
            </summary>
            <returns>The preference value.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.People.UserService.GetPreference(System.String,System.Object)">
            <summary>
            Gets the preference for current user.
            </summary>
            <returns>The preference.</returns>
            <param name="name">Name.</param>
            <param name="defaultValue">A default value in the case the preference does not exists.</param> 
        </member>
        <member name="M:Skahal.Infrastructure.Framework.People.UserService.GetPreferenceValue``1(System.String,``0)">
            <summary>
            Gets the preference value for current user.
            </summary>
            <returns>The preference value.</returns>
            <param name="name">Name.</param>
            <param name="defaultValue">A default value in the case the preference does not exists.</param> 
        </member>
        <member name="T:Skahal.Infrastructure.Framework.People.IUserRepository">
            <summary>
            Defines a interface for user repository.
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Repositories.IRepository`1">
            <summary>
            Defines the interface of a repository entity.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.IRepository`1.SetUnitOfWork(Skahal.Infrastructure.Framework.Repositories.IUnitOfWork)">
            <summary>
            Sets the unit of work.
            </summary>
            <param name="unitOfWork">Unit of work.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.IRepository`1.FindBy(System.Object)">
            <summary>
            Finds the entity by the key.
            </summary>
            <returns>The found entity.</returns>
            <param name="key">Key.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.IRepository`1.FindAll(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Finds all entities that matches the filter.
            </summary>
            <returns>The found entities.</returns>
            <param name="offset">The offset to start the result.</param>
            <param name="limit">The result count limit.</param>
            <param name="filter">The entities filter.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.IRepository`1.FindAllAscending``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Finds all entities that matches the filter in a ascending order.
            </summary>
            <returns>The found entities.</returns>
            <param name="offset">The offset to start the result.</param>
            <param name="limit">The result count limit.</param>
            <param name="filter">The entities filter.</param>
            <param name="orderBy">The order.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.IRepository`1.FindAllDescending``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Finds all entities that matches the filter in a descending order.
            </summary>
            <returns>The found entities.</returns>
            <param name="offset">The offset to start the result.</param>
            <param name="limit">The result count limit.</param>
            <param name="filter">The entities filter.</param>
            <param name="orderBy">The order.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.IRepository`1.CountAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Counts all entities that matches the filter.
            </summary>
            <returns>The number of the entities that matches the filter.</returns>
            <param name="filter">Filter.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.IRepository`1.Add(`0)">
            <summary>
            Add the specified entity.
            </summary>
            <param name="item">The entity.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.IRepository`1.Remove(`0)">
            <summary>
            Remove the specified entity.
            </summary>
            <param name="item">The entity.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Repositories.IRepository`1.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="!:Skahal.Infrastructure.Framework.Repositories.IRepository&lt;TEntity, TKey&gt;"/> with the specified key.
            </summary>
            <param name="key">Key.</param>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Logging.BufferLogStrategy">
            <summary>
            A buffer log strategy used for keep the logs until a real log strategy be setted.
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Logging.LogMessage">
            <summary>
            Represents a log message.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.LogMessage.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Skahal.Infrastructure.Framework.Logging.LogMessage"/> class.
            </summary>
            <param name="message">Message.</param>
            <param name="arguments">Arguments.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.LogMessage.#ctor(Skahal.Infrastructure.Framework.Logging.LogLevel,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Skahal.Infrastructure.Framework.Logging.LogMessage"/> class.
            </summary>
            <param name="logLevel">Log level.</param>
            <param name="message">Message.</param>
            <param name="arguments">Arguments.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Logging.LogMessage.LogLevel">
            <summary>
            Gets or sets the log level.
            </summary>
            <value>The log level.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Logging.LogMessage.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Logging.LogMessage.Arguments">
            <summary>
            Gets or sets the arguments.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.NetHelper">
            <summary>
            Net helper.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.NetHelper.IsValidTcpPortNumber(System.Int32)">
            <summary>
            Determines whether is a valid tcp port number the specified portNumber.
            </summary>
            <returns><c>true</c> if is a valid tcp port number the specified portNumber; otherwise, <c>false</c>.</returns>
            <param name="portNumber">Port number.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.NetHelper.ThrowIfInvalidTcpPortNumber(System.Int32)">
            <summary>
            Throws a exception if invalid tcp port number.
            </summary>
            <param name="portNumber">Port number.</param>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Net.Messaging.ConnectedEventArgs">
            <summary>
            Connected event arguments.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Net.Messaging.ConnectedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Skahal.Infrastructure.Framework.Net.Messaging.ConnectedEventArgs"/> class.
            </summary>
            <param name="connectionOrder">Connection order.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Net.Messaging.ConnectedEventArgs.ConnectionOrder">
            <summary>
            Gets the connection order.
            </summary>
            <value>The connection order.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Logging.FiltrableLogStrategy">
            <summary>
            A filtrable log strategy used for filter an underlying log strategy.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.FiltrableLogStrategy.#ctor(Skahal.Infrastructure.Framework.Logging.ILogStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Skahal.Infrastructure.Framework.Logging.FiltrableLogStrategy"/> class.
            </summary>
            <param name="underlyingLogStrategy">Underlying log strategy.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.FiltrableLogStrategy.WriteDebug(System.String,System.Object[])">
            <summary>
            Writes the debug log level message.
            </summary>
            <param name="message">Message.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.FiltrableLogStrategy.WriteWarning(System.String,System.Object[])">
            <summary>
            Writes the warning log level message.
            </summary>
            <param name="message">Message.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Logging.FiltrableLogStrategy.WriteError(System.String,System.Object[])">
            <summary>
            Writes the error log level message.
            </summary>
            <param name="message">Message.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Logging.FiltrableLogStrategy.Filter">
            <summary>
            Gets or sets the filter for log messages.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Repositories.MemoryRepository`1">
            <summary>
            A basic repository on memory.
            <remarks>
            In most of cases will be used for tests purposes.
            </remarks>
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Repositories.RepositoryBase`1">
            <summary>
            A base class for repositories.
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Repositories.IUnitOfWorkRepository">
            <summary>
            Defines an unit of work repository.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.IUnitOfWorkRepository.PersistNewItem(Skahal.Infrastructure.Framework.Domain.IAggregateRoot)">
            <summary>
            Persists the new item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.IUnitOfWorkRepository.PersistUpdatedItem(Skahal.Infrastructure.Framework.Domain.IAggregateRoot)">
            <summary>
            Persists the updated item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.IUnitOfWorkRepository.PersistDeletedItem(Skahal.Infrastructure.Framework.Domain.IAggregateRoot)">
            <summary>
            Persists the deleted item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:Skahal.Infrastructure.Framework.Repositories.RepositoryBase&lt;TEntity, TKey&gt;"/> class.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryBase`1.#ctor(Skahal.Infrastructure.Framework.Repositories.IUnitOfWork)">
            <summary>
            Initializes a new instance of the <see cref="!:Skahal.Infrastructure.Framework.Repositories.RepositoryBase&lt;TEntity, TKey&gt;"/> class.
            </summary>
            <param name="unitOfWork">Unit of work.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryBase`1.FindBy(System.Object)">
            <summary>
            Finds an entity by the key.
            </summary>
            <returns>The entity.</returns>
            <param name="key">Key.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryBase`1.FindAll(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Finds all entities that matches the filter.
            </summary>
            <returns>The found entities.</returns>
            <param name="offset">Offset.</param>
            <param name="limit">Limit.</param>
            <param name="filter">Filter.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryBase`1.FindAllAscending``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Finds all entities that matches the filter in a ascending order.
            </summary>
            <returns>The found entities.</returns>
            <param name="offset">The offset to start the result.</param>
            <param name="limit">The result count limit.</param>
            <param name="filter">The entities filter.</param>
            <param name="orderBy">The order.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryBase`1.FindAllDescending``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Finds all entities that matches the filter in a descending order.
            </summary>
            <returns>The found entities.</returns>
            <param name="offset">The offset to start the result.</param>
            <param name="limit">The result count limit.</param>
            <param name="filter">The entities filter.</param>
            <param name="orderBy">The order.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryBase`1.CountAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Counts all entities that matches the filter.
            </summary>
            <returns>The found entities.</returns>
            <param name="filter">Filter.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryBase`1.SetUnitOfWork(Skahal.Infrastructure.Framework.Repositories.IUnitOfWork)">
            <summary>
            Sets the unit of work.
            </summary>
            <param name="unitOfWork">Unit of work.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryBase`1.Add(`0)">
            <summary>
            Add the specified item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryBase`1.Remove(`0)">
            <summary>
            Remove the specified entity.
            </summary>
            <param name="item">The entity.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryBase`1.PersistNewItem(Skahal.Infrastructure.Framework.Domain.IAggregateRoot)">
            <summary>
            Persists the new item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryBase`1.PersistUpdatedItem(Skahal.Infrastructure.Framework.Domain.IAggregateRoot)">
            <summary>
            Persists the updated item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryBase`1.PersistDeletedItem(Skahal.Infrastructure.Framework.Domain.IAggregateRoot)">
            <summary>
            Persists the deleted item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryBase`1.PersistNewItem(`0)">
            <summary>
            Persists the new item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryBase`1.PersistUpdatedItem(`0)">
            <summary>
            Persists the updated item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryBase`1.PersistDeletedItem(`0)">
            <summary>
            Persists the deleted item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryBase`1.ValidateUnitOfWork">
            <summary>
            Validates the unit of work.
            </summary>
            <exception cref="T:System.InvalidOperationException">There is no UnitOfWork configured for the repository '{0}'..With(GetType().Name)</exception>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Repositories.RepositoryBase`1.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="!:Skahal.Infrastructure.Framework.Repositories.RepositoryBase&lt;TEntity, TKey&gt;"/> with the specified key.
            </summary>
            <param name="key">Key.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Repositories.RepositoryBase`1.UnitOfWork">
            <summary>
            Gets the unit of work.
            </summary>
            <value>The unit of work.</value>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.MemoryRepository`1.#ctor(System.Func{`0,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="!:Skahal.Infrastructure.Framework.Repositories.MemoryRepository&lt;TEntity, TKey&gt;"/> class.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.MemoryRepository`1.#ctor(Skahal.Infrastructure.Framework.Repositories.IUnitOfWork,System.Func{`0,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="!:Skahal.Infrastructure.Framework.Repositories.MemoryRepository&lt;TEntity, TKey&gt;"/> class.
            </summary>
            <param name="createNewKey">Create new key.</param>
            <param name="unitOfWork">Unit of work.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.MemoryRepository`1.FindBy(System.Object)">
            <summary>
            Finds the entity by the key.
            </summary>
            <returns>The found entity.</returns>
            <param name="key">Key.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.MemoryRepository`1.FindAll(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Finds all entities that matches the filter.
            </summary>
            <returns>The found entities.</returns>
            <param name="offset">Offset.</param>
            <param name="limit">Limit.</param>
            <param name="filter">Filter.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.MemoryRepository`1.FindAllAscending``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Finds all entities that matches the filter in a ascending order.
            </summary>
            <returns>The found entities.</returns>
            <param name="offset">The offset to start the result.</param>
            <param name="limit">The result count limit.</param>
            <param name="filter">The entities filter.</param>
            <param name="orderBy">The order.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.MemoryRepository`1.FindAllDescending``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Finds all entities that matches the filter in a descending order.
            </summary>
            <returns>The found entities.</returns>
            <param name="offset">The offset to start the result.</param>
            <param name="limit">The result count limit.</param>
            <param name="filter">The entities filter.</param>
            <param name="orderBy">The order.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.MemoryRepository`1.CountAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Counts all entities that matches the filter.
            </summary>
            <returns>The number of the entities that matches the filter.</returns>
            <param name="filter">Filter.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.MemoryRepository`1.PersistNewItem(`0)">
            <summary>
            Persists the new item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.MemoryRepository`1.PersistUpdatedItem(`0)">
            <summary>
            Persists the updated item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.MemoryRepository`1.PersistDeletedItem(`0)">
            <summary>
            Persists the deleted item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Repositories.MemoryRepository`1.Entities">
            <summary>
            Gets the entities.
            </summary>
            <value>The entities.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Net.PostType">
            <summary>
            Determines what type of post to perform.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Net.PostType.Get">
            <summary>
            Does a get against the source.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Net.PostType.Post">
            <summary>
            Does a post against the source.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Net.PostType.Json">
            <summary>
            Doeas a json get against the source.
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Net.IPostSubmitter">
            <summary>
            Defines a interface for a post submitter.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Net.IPostSubmitter.Post">
            <summary>
            Performs the post.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Net.IPostSubmitter.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Net.IPostSubmitter.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Net.IPostSubmitter.PostItems">
            <summary>
            Gets or sets the post items.
            </summary>
            <value>The post items.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Net.IPostSubmitter.CookieContainer">
            <summary>
            Gets or sets the cookie container.
            </summary>
            <value>The cookie container.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Net.IPostSubmitter.ResponseHeaders">
            <summary>
            Gets the response headers.
            </summary>
            <value>The response headers.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Net.IPostSubmitter.ResponseEncoding">
            <summary>
            Gets or sets the response encoding.
            </summary>
            <value>The response encoding.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Net.IPostSubmitter.Referer">
            <summary>
            Gets or sets the referer.
            </summary>
            <value>The referer.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Net.IPostSubmitter.Timeout">
            <summary>
            Gets or sets the timeout in milliseconds.
            </summary>
            <value>
            The timeout.
            </value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.IO.IOfxTransaction">
            <summary>
            Defines an interface for an OFX transaction.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.IO.IOfxTransaction.Date">
            <summary>
            Gets or sets the date.
            </summary>
            <value>The date.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.IO.IOfxTransaction.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.IO.IOfxTransaction.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.IO.OfxTransaction">
            <summary>
            Ofx transaction.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.IO.OfxTransaction.Date">
            <summary>
            Gets or sets the date.
            </summary>
            <value>The date.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.IO.OfxTransaction.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.IO.OfxTransaction.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.IO.OfxWriter">
            <summary>
            Ofx writer.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.IO.OfxWriter.Write(System.String,Skahal.Infrastructure.Framework.IO.IOfxTransaction[])">
            <summary>
            Write the specified filename and transactions.
            </summary>
            <param name="filename">Filename.</param>
            <param name="transactions">Transactions.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.IO.OfxWriter.Write(System.String,System.String,Skahal.Infrastructure.Framework.IO.IOfxTransaction[])">
            <summary>
            Write the specified filename, accountId and transactions.
            </summary>
            <param name="filename">Filename.</param>
            <param name="accountId">Account identifier.</param>
            <param name="transactions">Transactions.</param>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Repositories.UnitOfWorkEntityState">
            <summary>
            The states of an entity inside the Unit Of Work.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Repositories.UnitOfWorkEntityState.Added">
            <summary>
            The entity has been register to be added.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Repositories.UnitOfWorkEntityState.Changed">
            <summary>
            The entity has been register to be changed.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Repositories.UnitOfWorkEntityState.Removed">
            <summary>
            The entity has been register to be removed.
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Repositories.UnitOfWorkEntity">
            <summary>
            Represents a entity inside an Unit Of Work.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.UnitOfWorkEntity.#ctor(Skahal.Infrastructure.Framework.Domain.IAggregateRoot,Skahal.Infrastructure.Framework.Repositories.UnitOfWorkEntityState)">
            <summary>
            Initializes a new instance of the <see cref="T:Skahal.Infrastructure.Framework.Repositories.UnitOfWorkEntity"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="state">The state.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Repositories.UnitOfWorkEntity.Entity">
            <summary>
            Gets or sets the entity.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Repositories.UnitOfWorkEntity.State">
            <summary>
            Gets or sets the state.
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.AchievementUnlockedEventArgs">
            <summary>
            Achievement unlocked event arguments.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.AchievementUnlockedEventArgs.#ctor(Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNAchievement)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.AchievementUnlockedEventArgs"/> class.
            </summary>
            <param name="achievement">Achievement.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.AchievementUnlockedEventArgs.Achievement">
            <summary>
            Gets the achievement.
            </summary>
            <value>The achievement.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.AchievementUpdatedEventArgs">
            <summary>
            Achievement updated event arguments.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.AchievementUpdatedEventArgs.#ctor(Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNAchievement)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.AchievementUpdatedEventArgs"/> class.
            </summary>
            <param name="achievement">Achievement.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.AchievementUpdatedEventArgs.Achievement">
            <summary>
            Gets the achievement.
            </summary>
            <value>The achievement.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.AchievementUpdatingEventArgs">
            <summary>
            Achievement updating event arguments.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.AchievementUpdatingEventArgs.#ctor(Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNAchievement)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.AchievementUpdatingEventArgs"/> class.
            </summary>
            <param name="achievement">Achievement.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.AchievementUpdatingEventArgs.Achievement">
            <summary>
            Gets the achievement.
            </summary>
            <value>The achievement.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.AchievementUpdatingFailedEventArgs">
            <summary>
            Achievement updating failed event arguments.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.AchievementUpdatingFailedEventArgs.#ctor(Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNAchievement)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.AchievementUpdatingFailedEventArgs"/> class.
            </summary>
            <param name="achievement">Achievement.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.AchievementUpdatingFailedEventArgs.Achievement">
            <summary>
            Gets the achievement.
            </summary>
            <value>The achievement.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.AchievementsRefreshedEventArgs">
            <summary>
            Achievements refreshed event arguments.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.AchievementsRefreshedEventArgs.#ctor(Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNAchievement[])">
            <summary>
            Initializes a new instance of the
            <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.AchievementsRefreshedEventArgs"/> class.
            </summary>
            <param name="achievements">Achievements.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.AchievementsRefreshedEventArgs.Achievements">
            <summary>
            Gets the achievements.
            </summary>
            <value>The achievements.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.ActivityOpponentsRefreshedEventArgs">
            <summary>
            Activity opponents refreshed event arguments.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.ActivityOpponentsRefreshedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.ActivityOpponentsRefreshedEventArgs"/> class.
            </summary>
            <param name="activityOpponentsCount">Activity opponents count.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.ActivityOpponentsRefreshedEventArgs.ActivityOpponentsCount">
            <summary>
            Gets the activity opponents count.
            </summary>
            <value>The activity opponents count.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNAchievementManager">
            <summary>
            Defines a interface for a SGN achievement manager.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNAchievementManager.UpdateAchievement(Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNAchievement)">
            <summary>
            Updates the achievement.
            </summary>
            <param name='achievement'>
            Achievement.
            </param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNAchievementManager.ResetAchievements">
            <summary>
            Resets the achievements.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNAchievementManager.RefreshAchievements">
            <summary>
            Refreshs the achievements.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNAchievementManager.AchievementUnlocked">
            <summary>
            Occurs when achievement unlocked.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNAchievementManager.AchievementsRefreshed">
            <summary>
            Occurs when achievements refreshed.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNAchievementManager.AchievementUpdating">
            <summary>
            Occurs when achievement updating.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNAchievementManager.AchievementUpdatingFailed">
            <summary>
            Occurs when achievement updating failed.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNAchievementManager.AchievementUpdated">
            <summary>
            Occurs when achievement updated.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNAchievementManager.Supported">
            <summary>
            Gets a value indicating whether achievements are supported.
            </summary>
            <value>
            <c>true</c> if supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNFactory">
            <summary>
            Defines a interface for an abstract factory for Social Gaming Network.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNFactory.CreatePlayerManager">
            <summary>
            Creates the player manager.
            </summary>
            <returns>The player manager.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNFactory.CreateMultiplayerManager">
            <summary>
            Creates the multiplayer manager.
            </summary>
            <returns>The multiplayer manager.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNFactory.CreateVoiceChatManager">
            <summary>
            Creates the voice chat manager.
            </summary>
            <returns>The voice chat manager.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNFactory.CreateUIManager">
            <summary>
            Creates the user interface manager.
            </summary>
            <returns>The user interface manager.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNFactory.CreateLeaderboardManager">
            <summary>
            Creates the leaderboard manager.
            </summary>
            <returns>The leaderboard manager.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNFactory.CreateAchievementManager">
            <summary>
            Creates the achievement manager.
            </summary>
            <returns>The achievement manager.</returns>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNLeaderboardManager">
            <summary>
            Defines a interface for a SGN leaderboard manager.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNLeaderboardManager.UpdateLeaderboard(Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard)">
            <summary>
            Updates the leaderboard.
            </summary>
            <param name='leaderboard'>
            Leaderboard.
            </param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNLeaderboardManager.GetPlayerScore(Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard,Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNPlayer,System.Action{System.Int32})">
            <summary>
            Gets the player score.
            </summary>
            <param name='leaderboard'>
            Leaderboard.
            </param>
            <param name='player'>
            Player.
            </param>
            <param name='scoreReceived'>
            Score received.
            </param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNLeaderboardManager.GetPlayerRank(Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard,Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNPlayer,System.Action{System.Int32})">
            <summary>
            Gets the player rank.
            </summary>
            <param name='leaderboard'>
            Leaderboard.
            </param>
            <param name='player'>
            Player.
            </param>
            <param name='rankReceived'>
            Rank received.
            </param>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNLeaderboardManager.LeaderboardUpdating">
            <summary>
            Occurs when leaderboard updating.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNLeaderboardManager.LeaderboardUpdatingFailed">
            <summary>
            Occurs when leaderboard updating failed.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNLeaderboardManager.LeaderboardUpdated">
            <summary>
            Occurs when leaderboard updated.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNLeaderboardManager.Supported">
            <summary>
            Gets a value indicating whether leadearboards are supported.
            </summary>
            <value>
            <c>true</c> if supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNMultiplayerManager">
            <summary>
            Defines a interface for a multiplayer manager.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNMultiplayerManager.Initialize">
            <summary>
            Initialize this instance.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNMultiplayerManager.SendMessage(System.String,System.String)">
            <summary>
            Sends the message.
            </summary>
            <param name="messageName">Message name.</param>
            <param name="messageValue">Message value.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNMultiplayerManager.CloseSession">
            <summary>
            Closes the session.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNMultiplayerManager.ShowAvailableOpponents">
            <summary>
            Shows the available opponents.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNMultiplayerManager.RefreshActivityOpponents">
            <summary>
            Refreshs the activity opponents.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNMultiplayerManager.OpponentConnected">
            <summary>
            Occurs when opponent connected.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNMultiplayerManager.OpponentDisconnected">
            <summary>
            Occurs when opponent disconnected.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNMultiplayerManager.InviteReceived">
            <summary>
            Occurs when invite received.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNMultiplayerManager.ActivityOpponentsRefreshed">
            <summary>
            Occurs when activity opponents refreshed.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNMultiplayerManager.Supported">
            <summary>
            Gets a value indicating whethe multiplayer is supported.
            </summary>
            <value><c>true</c> if supported; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNMultiplayerManager.IsHost">
            <summary>
            Gets a value indicating whether this instance is host.
            </summary>
            <value><c>true</c> if this instance is host; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNMultiplayerManager.Opponents">
            <summary>
            Gets the opponents.
            </summary>
            <value>The opponents.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNPlayerManager">
            <summary>
            Defines a interface for a player manager.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNPlayerManager.Login">
            <summary>
            Log in the player.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNPlayerManager.LoggedIn">
            <summary>
            Occurs when logged in.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNPlayerManager.Player">
            <summary>
            Gets the player.
            </summary>
            <value>The player.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNPlayerManager.IsLogged">
            <summary>
            Gets a value indicating whether the player is logged.
            </summary>
            <value><c>true</c> if this instance is logged; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNUIManager">
            <summary>
            Defines a interface for am UI manager.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNUIManager.ShowLeaderboards">
            <summary>
            Shows the leaderboards.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNUIManager.ShowAchievements">
            <summary>
            Shows the achievements.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNUIManager.AllowNotifications">
            <summary>
            Gets or sets a value indicating whether this
            <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNUIManager"/> allow notifications.
            </summary>
            <value><c>true</c> if allow notifications; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNVoiceChatManager">
            <summary>
            Defines a interface for a voice chat manager.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNVoiceChatManager.Supported">
            <summary>
            Gets a value indicating whether voice chat is supported.
            </summary>
            <value><c>true</c> if supported; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNVoiceChatManager.Enabled">
            <summary>
            Gets or sets a value indicating whether voice chat is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.InviteReceivedEventArgs">
            <summary>
            Invite received event arguments.
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.LeaderboardUpdatedEventArgs">
            <summary>
            Leaderboard updated event arguments.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.LeaderboardUpdatedEventArgs.#ctor(Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.LeaderboardUpdatedEventArgs"/> class.
            </summary>
            <param name="leaderboard">Leaderboard.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.LeaderboardUpdatedEventArgs.Leaderboard">
            <summary>
            Gets the leaderboard.
            </summary>
            <value>The leaderboard.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.LeaderboardUpdatingEventArgs">
            <summary>
            Leaderboard updating event arguments.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.LeaderboardUpdatingEventArgs.#ctor(Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.LeaderboardUpdatingEventArgs"/> class.
            </summary>
            <param name="leaderboard">Leaderboard.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.LeaderboardUpdatingEventArgs.Leaderboard">
            <summary>
            Gets the leaderboard.
            </summary>
            <value>The leaderboard.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.LeaderboardUpdatingFailedEventArgs">
            <summary>
            Leaderboard updating failed event arguments.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.LeaderboardUpdatingFailedEventArgs.#ctor(Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.LeaderboardUpdatingFailedEventArgs"/> class.
            </summary>
            <param name="leaderboard">Leaderboard.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.LeaderboardUpdatingFailedEventArgs.Leaderboard">
            <summary>
            Gets the leaderboard.
            </summary>
            <value>The leaderboard.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.OpponentConnectedEventArgs">
            <summary>
            Opponent connected event arguments.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.OpponentConnectedEventArgs.#ctor(Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNPlayer)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.OpponentConnectedEventArgs"/> class.
            </summary>
            <param name="opponent">Opponent.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.OpponentConnectedEventArgs.Opponent">
            <summary>
            Gets the opponent.
            </summary>
            <value>The opponent.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.OpponentDisconnectedEventArgs">
            <summary>
            Opponent disconnected event arguments.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.OpponentDisconnectedEventArgs.#ctor(Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNPlayer)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.OpponentDisconnectedEventArgs"/> class.
            </summary>
            <param name="opponent">Opponent.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.OpponentDisconnectedEventArgs.Opponent">
            <summary>
            Gets the opponent.
            </summary>
            <value>The opponent.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.PlayerLoggedInEventArgs">
            <summary>
            Player logged in event arguments.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.PlayerLoggedInEventArgs.#ctor(Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNPlayer)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.PlayerLoggedInEventArgs"/> class.
            </summary>
            <param name="player">Player.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.PlayerLoggedInEventArgs.Player">
            <summary>
            Gets the player.
            </summary>
            <value>The player.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNAchievement">
            <summary>
            Defines an achievement.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNAchievement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNAchievement"/> class.
            </summary>
            <param name="id">Identifier.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNAchievement.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNAchievement"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNAchievement"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNAchievement"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNAchievement.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNAchievement"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNAchievement.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNAchievement"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNAchievement"/>.</returns>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNAchievement.ID">
            <summary>
            Gets the ID.
            </summary>
            <value>The I.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNAchievement.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNAchievement.Percent">
            <summary>
            Gets or sets the percent.
            </summary>
            <value>The percent.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard">
            <summary>
            SGN leaderboard.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard"/> class.
            </summary>
            <param name="id">Identifier.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard"/>.</returns>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard.ID">
            <summary>
            Gets the ID.
            </summary>
            <value>The D..</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard.Score">
            <summary>
            Gets or sets the score.
            </summary>
            <value>The score.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNPlayer">
            <summary>
            Defines a player.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNPlayer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNPlayer"/> class.
            </summary>
            <param name="id">Identifier.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNPlayer.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNPlayer"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNPlayer.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNPlayer"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNPlayer"/>.</returns>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNPlayer.ID">
            <summary>
            Gets the ID.
            </summary>
            <value>The I.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNPlayer.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNReliableDataManager">
            <summary>
            A manager for SGN (Social Game Network) that keeps data reliable and 
            guarantees that any local update will reach the SGN server.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNReliableDataManager.Initialize">
            <summary>
            Initialize this instance.
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNAchievementManager">
            <summary>
            A local SGN achievment manager.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNAchievementManager.UpdateAchievement(Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNAchievement)">
            <summary>
            Updates the achievement.
            </summary>
            <param name="achievement">
            Achievement.
            </param>
            <exception cref="T:System.NotImplementedException">
            Is thrown when a requested operation is not implemented for a given type.
            </exception>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNAchievementManager.ResetAchievements">
            <summary>
            Resets the achievements.
            </summary>
            <exception cref="T:System.NotImplementedException">
            Is thrown when a requested operation is not implemented for a given type.
            </exception>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNAchievementManager.RefreshAchievements">
            <summary>
            Refreshs the achievements.
            </summary>
            <exception cref="T:System.NotImplementedException">
            Is thrown when a requested operation is not implemented for a given type.
            </exception>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNAchievementManager.Supported">
            <summary>
            Gets a value indicating whether achievements are supported.
            is supported.
            </summary>
            <value>
            <c>true</c> if supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNAchievementManager.AchievementUnlocked">
            <summary>
            Occurs when achievement unlocked.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNAchievementManager.AchievementsRefreshed">
            <summary>
            Occurs when achievements refreshed.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNAchievementManager.AchievementUpdating">
            <summary>
            Occurs when achievement updating.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNAchievementManager.AchievementUpdatingFailed">
            <summary>
            Occurs when achievement updating failed.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNAchievementManager.AchievementUpdated">
            <summary>
            Occurs when achievement updated.
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNFactory">
            <summary>
            A local SGN factory.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNFactory.CreatePlayerManager">
            <summary>
            Creates the player manager.
            </summary>
            <returns>
            The player manager.
            </returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNFactory.CreateMultiplayerManager">
            <summary>
            Creates the multiplayer manager.
            </summary>
            <returns>
            The multiplayer manager.
            </returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNFactory.CreateVoiceChatManager">
            <summary>
            Creates the voice chat manager.
            </summary>
            <returns>
            The voice chat manager.
            </returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNFactory.CreateUIManager">
            <summary>
            Creates the user interface manager.
            </summary>
            <returns>
            The user interface manager.
            </returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNFactory.CreateLeaderboardManager">
            <summary>
            Creates the leaderboard manager.
            </summary>
            <returns>
            The leaderboard manager.
            </returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNFactory.CreateAchievementManager">
            <summary>
            Creates the achievement manager.
            </summary>
            <returns>
            The achievement manager.
            </returns>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNLeaderboardManager">
            <summary>
            A local SGN leaderboard manager.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNLeaderboardManager.UpdateLeaderboard(Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard)">
            <summary>
            Updates the leaderboard.
            </summary>
            <param name="leaderboard">
            Leaderboard.
            </param>
            <exception cref="T:System.NotImplementedException">
            Is thrown when a requested operation is not implemented for a given type.
            </exception>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNLeaderboardManager.GetPlayerScore(Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard,Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNPlayer,System.Action{System.Int32})">
            <summary>
            Gets the player score.
            </summary>
            <param name="leaderboard">
            Leaderboard.
            </param>
            <param name="player">
            Player.
            </param>
            <param name="scoreReceived">
            Score received.
            </param>
            <exception cref="T:System.NotImplementedException">
            Is thrown when a requested operation is not implemented for a given type.
            </exception>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNLeaderboardManager.GetPlayerRank(Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNLeaderboard,Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNPlayer,System.Action{System.Int32})">
            <summary>
            Gets the player rank.
            </summary>
            <param name="leaderboard">
            Leaderboard.
            </param>
            <param name="player">
            Player.
            </param>
            <param name="rankReceived">
            Rank received.
            </param>
            <exception cref="T:System.NotImplementedException">
            Is thrown when a requested operation is not implemented for a given type.
            </exception>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNLeaderboardManager.Supported">
            <summary>
            Gets a value indicating whether leadearboards are supported.
            </summary>
            <value>
            <c>true</c> if supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNLeaderboardManager.LeaderboardUpdating">
            <summary>
            Occurs when leaderboard updating.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNLeaderboardManager.LeaderboardUpdatingFailed">
            <summary>
            Occurs when leaderboard updating failed.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNLeaderboardManager.LeaderboardUpdated">
            <summary>
            Occurs when leaderboard updated.
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNMultiplayerManager">
            <summary>
            A local SGN multiplayer manager.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNMultiplayerManager.Initialize">
            <summary>
            Initialize this instance.
            </summary>
            <exception cref="T:System.NotImplementedException">
            Is thrown when a requested operation is not implemented for a given type.
            </exception>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNMultiplayerManager.SendMessage(System.String,System.String)">
            <summary>
            Sends the message.
            </summary>
            <param name="messageName">
            Message name.
            </param>
            <param name="messageValue">
            Message value.
            </param>
            <exception cref="T:System.NotImplementedException">
            Is thrown when a requested operation is not implemented for a given type.
            </exception>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNMultiplayerManager.CloseSession">
            <summary>
            Closes the session.
            </summary>
            <exception cref="T:System.NotImplementedException">
            Is thrown when a requested operation is not implemented for a given type.
            </exception>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNMultiplayerManager.ShowAvailableOpponents">
            <summary>
            Shows the available opponents.
            </summary>
            <exception cref="T:System.NotImplementedException">
            Is thrown when a requested operation is not implemented for a given type.
            </exception>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNMultiplayerManager.RefreshActivityOpponents">
            <summary>
            Refreshs the activity opponents.
            </summary>
            <exception cref="T:System.NotImplementedException">
            Is thrown when a requested operation is not implemented for a given type.
            </exception>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNMultiplayerManager.Supported">
            <summary>
            Gets a value indicating whether multiplayer is supported.
            is supported.
            </summary>
            <value>
            <c>true</c> if supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNMultiplayerManager.OpponentConnected">
            <summary>
            Occurs when opponent connected.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNMultiplayerManager.OpponentDisconnected">
            <summary>
            Occurs when opponent disconnected.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNMultiplayerManager.InviteReceived">
            <summary>
            Occurs when invite received.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNMultiplayerManager.ActivityOpponentsRefreshed">
            <summary>
            Occurs when activity opponents refreshed.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNMultiplayerManager.IsHost">
            <summary>
            Gets a value indicating whether this instance is host.
            </summary>
            <value>
            <c>true</c> if this instance is host; otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.NotImplementedException">
            Is thrown when a requested operation is not implemented for a given type.
            </exception>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNMultiplayerManager.Opponents">
            <summary>
            Gets the opponents.
            </summary>
            <value>
            The opponents.
            </value>
            <exception cref="T:System.NotImplementedException">
            Is thrown when a requested operation is not implemented for a given type.
            </exception>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNPlayerManager">
            <summary>
            A local SGN player manager.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNPlayerManager.PlayerIdPrefsKey">
            <summary>
            Key used to reference player id on PlayerPrefs.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNPlayerManager.Login">
            <summary>
            Realizes the player 'login'.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNPlayerManager.LoggedIn">
            <summary>
            Occurs when logged in.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNPlayerManager.Player">
            <summary>
            Gets the player.
            </summary>
            <value>
            The player.
            </value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNPlayerManager.IsLogged">
            <summary>
            Gets a value indicating whether the player is 'logged'.
            </summary>
            <value>
            <c>true</c> if the player is logged; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNPlayerManager.PlayerId">
            <summary>
            Gets the player identifier.
            </summary>
            <value>
            The player identifier.
            </value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNUIManager">
            <summary>
            A local SGN UI manager.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNUIManager.ShowLeaderboards">
            <summary>
            Shows the leaderboards.
            </summary>
            <exception cref="T:System.NotImplementedException">
            Is thrown when a requested operation is not implemented for a given type.
            </exception>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNUIManager.ShowAchievements">
            <summary>
            Shows the achievements.
            </summary>
            <exception cref="T:System.NotImplementedException">
            Is thrown when a requested operation is not implemented for a given type.
            </exception>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNUIManager.AllowNotifications">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNUIManager"/>
            allow notifications.
            </summary>
            <value>
            <c>true</c> if allow notifications; otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.NotImplementedException">
            Is thrown when a requested operation is not implemented for a given type.
            </exception>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNVoiceChatManager">
            <summary>
            A local SGN voice chat manager.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNVoiceChatManager.Supported">
            <summary>
            Gets a value indicating whether voice chat is supported.
            </summary>
            <value>
            <c>true</c> if supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.Local.SHLocalSGNVoiceChatManager.Enabled">
            <summary>
            Gets or sets a value indicating whether the voice chat is enabled.
            </summary>
            <value>
            <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.NotImplementedException">
            Is thrown when a requested operation is not implemented for a given type.
            </exception>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Commons.AppService">
            <summary>
            Represents the application current running.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Commons.AppService.Initialize(Skahal.Infrastructure.Framework.Commons.IAppStrategy)">
            <summary>
            Initialize the service.
            </summary>
            <param name="strategy">Strategy.</param>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Commons.AppService.Started">
            <summary>
            Occurs when application has started.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Commons.AppService.BackgroundBegin">
            <summary>
            Occurs when applications gos to background.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Commons.AppService.ForegroundBegin">
            <summary>
            Occurs when application come back to foreground.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Commons.AppService.Exited">
            <summary>
            Occurs when application has been exited.
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Commons.IAppStrategy">
            <summary>
            Defines an interface for a strategy to expose platform specific app events and operations.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Commons.IAppStrategy.Started">
            <summary>
            Occurs when application has started.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Commons.IAppStrategy.BackgroundBegin">
            <summary>
            Occurs when applications gos to background.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Commons.IAppStrategy.ForegroundBegin">
            <summary>
            Occurs when application come back to foreground.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Commons.IAppStrategy.Exited">
            <summary>
            Occurs when application has been exited.
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Repositories.IUnitOfWork">
            <summary>
            Defines an interface for an unit of work.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.IUnitOfWork.RegisterAdded(Skahal.Infrastructure.Framework.Domain.IAggregateRoot,Skahal.Infrastructure.Framework.Repositories.IUnitOfWorkRepository)">
            <summary>
            Registers an entity to be added when commited.
            </summary>
            <param name="entity">Entity.</param>
            <param name="repository">Repository.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.IUnitOfWork.RegisterChanged(Skahal.Infrastructure.Framework.Domain.IAggregateRoot,Skahal.Infrastructure.Framework.Repositories.IUnitOfWorkRepository)">
            <summary>
            Registers an entity to be changed when commited.
            </summary>
            <param name="entity">Entity.</param>
            <param name="repository">Repository.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.IUnitOfWork.RegisterRemoved(Skahal.Infrastructure.Framework.Domain.IAggregateRoot,Skahal.Infrastructure.Framework.Repositories.IUnitOfWorkRepository)">
            <summary>
             Registers an entity to be removed when commited.
            </summary>
            <param name="entity">Entity.</param>
            <param name="repository">Repository.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.IUnitOfWork.Commit">
            <summary>
            Commit the registered entities.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.IUnitOfWork.Rollback">
            <summary>
            Undo changes made after the latest commit.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.IUnitOfWork.Get(System.Object)">
            <summary>
            Get the entity which is registered inside the unit of work.
            </summary>
            <param name="key">The entity key.</param>
            <returns>The entity instance or null if it is not register.</returns>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Commons.IProgressIndicator">
            <summary>
            Defines an interface for a progress indicator.
            </summary>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Commons.IProgressIndicator.ProgressChanged">
            <summary>
            Occurs when progress changed.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Commons.IProgressIndicator.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Commons.IProgressIndicator.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Commons.IProgressIndicator.Progress">
            <summary>
            Gets or sets the progress percent.
            </summary>
            <value>The progress.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Commons.ProgressIndicator">
            <summary>
            A basic progress indicator.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Commons.ProgressIndicator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Skahal.Infrastructure.Framework.Commons.ProgressIndicator"/> class.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Commons.ProgressIndicator.OnProgressChanged(System.EventArgs)">
            <summary>
            Raises the progress changed event.
            </summary>
            <param name="args">Arguments.</param>
        </member>
        <member name="E:Skahal.Infrastructure.Framework.Commons.ProgressIndicator.ProgressChanged">
            <summary>
            Occurs when progress changed.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Commons.ProgressIndicator.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Commons.ProgressIndicator.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Commons.ProgressIndicator.Progress">
            <summary>
            Gets or sets the progress percent.
            </summary>
            <value>The progress.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Domain.DomainException">
            <summary>
            Represents an excetion occurent on domain layer.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Domain.DomainException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Skahal.Infrastructure.Framework.Domain.DomainException"/> class.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Domain.DomainException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Skahal.Infrastructure.Framework.Domain.DomainException"/> class.
            </summary>
            <param name="message">Message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Text.BindableTextKey">
            <summary>
            Representa uma chave de binding dentro de um texto da DynamicTextBuilder.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Text.BindableTextKey.BindableKeyPrefix">
            <summary>
            Prefixo de marcação de uma chave de binding.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Text.BindableTextKey.BindableKeySuffix">
            <summary>
            Sufixo de marcação de uma chave de binding.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Text.BindableTextKey.BindableKeyPrefixEscape">
            <summary>
            Escape para o prefixo de marcação de uma chave de binding.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Text.BindableTextKey.BindableKeySuffixEscape">
            <summary>
            Escape para o sufixo de marcação de uma chave de binding.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Text.BindableTextKey.m_name">
            <summary>
            Armazena o nome da chave.
            <example>
            User.UserName.
            </example>
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Text.BindableTextKey.m_nameWithPrefixAndSuffix">
            <summary>
            Armazena o nome da chave com prefixo e sufixo.
            <example>
            {User.UserName}.
            </example>
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Text.BindableTextKey.m_objectName">
            <summary>
            O nome do objeto.
            <example>
            User.
            </example>
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Text.BindableTextKey.m_propertyName">
            <summary>
            O nome da propriedade (se existir).
            <example>
            UserName.
            </example>
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.BindableTextKey.#ctor(System.String)">
            <summary>
            Inicializa uma nova instância de <see cref="T:Skahal.Infrastructure.Framework.Text.BindableTextKey"/>.
            </summary>
            <param name="nameWithPrefixAndSuffix">O nome da chave com prefixo e sufixo.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.BindableTextKey.HasEscape(System.String)">
            <summary>
            Verifica se o texto possui caracteres de escape para as chaves.
            </summary>
            <param name="text">O texto a ser verificado.</param>
            <returns>Se possui caracter de escape para prefixo ou suffixo.</returns>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Text.BindableTextKey.Name">
            <summary>
            Obtém o nome.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Text.BindableTextKey.NameWithPrefixAndSuffix">
            <summary>
            Obtém o nome com prefixo e sufixo.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Text.BindableTextKey.ObjectName">
            <summary>
            Obtém o nome do objeto na chave.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Text.BindableTextKey.PropertyName">
            <summary>
            Obtém o nome da propriedade na chave.
            </summary>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Text.DynamicTextBuilder">
            <summary> 
            Permite que sejam criados textos com chaves que serão posteriormente substituídas por valores de objetos e suas propriedades.
            <remarks>
            Faz a substituição de chaves pelos valores correspondentes dos objetos ou das propriedades desses objetos.
            Toda a substituição é feita através de reflection.
            Por exemplo, se adicionarmos um objeto bindable do tipo AdvancedMembershipUser, marcando-o com o nome "User", desta forma:
            <code>
            DynamicTextBuilder textBuilder = new DynamicTextBuilder();
            textBuilder.AddBindable("User", user); 
            </code>
            Poderemos então utilizar as propriedades da instancia de AdvancedMembershipUser para preencher o texto:
            <code>
            textBuilder.Append("Nome completo: {User.FullName}\nE-mail: {User.Email}");
            </code>
            Ao chamarmos o método ToString do DynamicTextBuilder receberemos o seguinte resultado como retorno:
            Nome completo: Fulano da Beltrano\nE-mail: fulano@ciclano.com.br     
            </remarks>
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Text.DynamicTextBuilder.s_getBindableKeysRegex">
            <summary>
            Expressão regular para localizar as chaves de binding.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Text.DynamicTextBuilder.m_bindables">
            <summary>
            Armazena os objetos de binding.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Text.DynamicTextBuilder.m_text">
            <summary>
            StringBuilder utilizado internamente para armazenar os textos adicionados.
            </summary>
        </member>
        <member name="F:Skahal.Infrastructure.Framework.Text.DynamicTextBuilder.m_bindableKeyValuesCache">
            <summary>
            Cache para os valores das chaves.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.DynamicTextBuilder.AddBindable(System.String,System.Object)">
            <summary>
            Adiciona um objeto de binding.
            <remarks>
            Se adicionarmos um objeto desta forma:
            <code>
            textBuilder.AddBindable("User", usuario);
            </code>
            Poderemos utilizá-lo dentro do texto desta forma:
            "Nome do usuário: {User.FullName}, e-mail: {User.Email}.
            </remarks>
            </summary>
            <param name="key">A chave que será utilizada para representar os objetos nas chaves de binding.</param>
            <param name="bindable">O objeto de binding.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.DynamicTextBuilder.Append(System.String)">
            <summary>
            Adiciona o texto.
            </summary>
            <param name="text">O texto a ser adicionado.</param>
            <returns>A instância de DynamicTextBuilder.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.DynamicTextBuilder.AppendLine">
            <summary>
            Adiciona uma linha.
            </summary>
            <returns>A instância de DynamicTextBuilder.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.DynamicTextBuilder.Clear(System.Boolean)">
            <summary>
            Remove todo o texto anteriormente adicionado e opcionalmente os objetos bindable.
            </summary>
            <param name="clearBindable">Se deve remover os objetos bindable.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.DynamicTextBuilder.Clear">
            <summary>
            Remove todo o texto anteriormente adicionado.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.DynamicTextBuilder.GetBindableKeysInText(System.String)">
            <summary>
            Obtém as chaves de binding existentes no texto.
            </summary>
            <param name="text">O texto a ser avaliado.</param>
            <returns>As BindableTextKey localizadas.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.DynamicTextBuilder.GetBindable(Skahal.Infrastructure.Framework.Text.BindableTextKey)">
            <summary>
            Obtém um objeto bindable pela chave de binding.
            </summary>
            <param name="key">A BindableTextKey.</param>
            <returns>O objeto bindable localizado.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.DynamicTextBuilder.GetBindableKeyValue(Skahal.Infrastructure.Framework.Text.BindableTextKey)">
            <summary>
            Obtém o valor para uma BindableTextKey.
            </summary>
            <param name="key">A BindableTextKey.</param>
            <returns>O valor da BindableTextKey.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.DynamicTextBuilder.ToString">
            <summary>
            Monta a representação dos textos adicionados substituindo as chaves de binding pelos valores existentes nos objetos bindable adicionados.
            </summary>
            <returns>O texto substituído.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.DynamicTextBuilder.GetValue(System.String)">
            <summary>
            Gets the value.
            </summary>
            <returns>The value.</returns>
            <param name="bindableKey">Bindable key.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.DynamicTextBuilder.Format(System.String,System.String,System.Object)">
            <summary>
            Monta a representação do texto substituindo as chaves de binding pelos valores existentes no objeto bindable informado.
            </summary>
            <param name="text">O texto a ser formatado.</param>
            <param name="bindableKey">A chave utilizada para o objjeto bindable.</param>
            <param name="bindable">O objeto que será utilizado na substituições.</param>
            <returns>O texto formatado.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.DynamicTextBuilder.FormatSingularOrPlural(System.Int32,System.String,System.String,System.String,System.Object)">
            <summary>
            Chama o método Format levando em conta se utiliza o texto no singular, counter &lt;= 1, ou o texto no plural.
            </summary>
            <param name="counter">O contador que definirá se será utilizado o texto no singular ou plural.</param>
            <param name="singularText">O texto no singular.</param>
            <param name="pluralText">O texto no plural.</param>
            <param name="bindableKey">A chave utilizada para o objjeto bindable.</param>
            <param name="bindable">O objeto que será utilizado na substituições.</param>
            <returns>O texto formatado.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.DynamicTextBuilder.GetProperty(System.Type,System.String)">
            <summary>
            Obtém a propriedade no tipo informado.
            </summary>
            <param name="type">O tipo onde será localizada a propriedade.</param>
            <param name="propertyName">O nome da propriedade</param>
            <returns>A PropertyInfo localizada.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.DynamicTextBuilder.GetPropertyValue(System.Object,System.String)">
            <summary>
            Obtém o valor de uma propriedade.
            </summary>
            <param name="instance">O objeto dono da propriedade.</param>
            <param name="propertyName">O nome da propriedade.</param>
            <returns>O valor da propriedade.</returns>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Text.StringExtensions">
            <summary>
            Extensions methods for strings.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringExtensions.Capitalize(System.String)">
            <summary>
            Capitalize the string.
            </summary>
            <param name="value">
            The original string. <see cref="T:System.String"/>
            </param>
            <returns>
            The capitalized version of the string. <see cref="T:System.String"/>
            </returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringExtensions.ContainsIgnoreCase(System.String,System.String)">
            <summary>
            Check if string contains value ignoring the case.
            </summary>
            <returns><c>true</c>, if ignore case was containsed, <c>false</c> otherwise.</returns>
            <param name="source">Source.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringExtensions.Limit(System.String,System.Int32)">
            <summary>
            Limit the length of the string.
            </summary>
            <param name="source">Source.</param>
            <param name="maxLength">Max length.</param>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Text.StringHelper">
            <summary>
            Classe utilitária para strings.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.Format(System.String,System.Object[])">
            <summary>
            Formats the specified format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.FormatSingularOrPlural(System.Int32,System.String,System.String,System.Object[])">
            <summary>
            Executa um StringHelper.Format levando em conta o valor de counter,
            se counter for maior que 1 então utilizará a string informada em formatPlural, 
            caso contrário utilizará a string informada em formatSingular.
            </summary>
            <param name="counter">O contador para definir se será utilizado a string para singular ou plural.</param>
            <param name="formatSingular">A string para singular.</param>
            <param name="formatPlural">A string para plural.</param>
            <param name="args">Os argumentos para as strings.</param>
            <returns>Retorna a string formatada (formatSingular ou formatPlural) com os valores.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.Split(System.String,System.String)">
            <summary>
            Splits the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="separator">The separator.</param>
            <returns>The string array of split parts.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.ReplaceChar(System.String,System.Int32,System.Char)">
            <summary>
            Replaces the char on specified position.
            </summary>
            <param name="source">The source.</param>
            <param name="index">The index.</param>
            <param name="replace">The replace.</param>
            <returns></returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.ReplaceChar(System.String,System.Int32,System.String)">
            <summary>
            Replaces the char on specified position.
            </summary>
            <param name="source">The source.</param>
            <param name="index">The index.</param>
            <param name="replace">The replace.</param>
            <returns></returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.RemoveAfter(System.String,System.String)">
            <summary>
            Remove a string após after
            </summary>
            <param name="source">A string original.</param>
            <param name="after">Após essa string tudo deve ser removido.</param>
            <returns>A string sem a string após after.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.RemoveAccents(System.String)">
            <summary>
            Remove qualquer acento e cedilha da string. 
            </summary>
            <param name="source">String original.</param>
            <returns>String com os acentos e cedilhas removidos.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.RemoveNonAlphanumeric(System.String)">
            <summary>
            Remove todos os caracteres não alfanuméricos.
            </summary>
            <param name="source">A string a ser avaliada.</param>
            <returns>A string sem caracteres não alfanuméricos.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.RemoveNonNumeric(System.String)">
            <summary>
            Remove caracteres não numéricos.
            </summary>
            <param name="source">A string a ser avaliada.</param>
            <returns>A string sem caracteres não númericos.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.ReplaceBetween(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Executa replace da string entre os delimitadores.
            </summary>
            <param name="source">String onde será feito o replace.</param>
            <param name="replace">String para substituir entre os delimitadores.</param>
            <param name="firstDelimiter">Primeiro delimitador.</param>
            <param name="secondDelimiter">Segundo delimitador.</param>
            <param name="removeStringDelimiters">Define se deve remover os delimitadores.</param>
            <returns>String com o replace efetuado.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.ReplaceBefore(System.String,System.String,System.String)">
            <summary>
            Executa um replace na string antes de before.
            </summary>
            <param name="source">String onde será feito o replace.</param>
            <param name="replace">String para substituir antes de before.</param>
            <param name="before">O replace será feito até before.</param>
            <returns>String com o replace efetuado.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.ReplaceAfter(System.String,System.String,System.String)">
            <summary>
            Executa um replace na string após de after.
            </summary>
            <param name="source">String onde será feito o replace.</param>
            <param name="replace">String para substituir depois de after.</param>
            <param name="after">O replace será feito depois de after.</param>
            <returns>String com o replace efetuado.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.SubstringBefore(System.String,System.String,System.Boolean)">
            <summary>
            Retorna o trecho da string anterior a before.
            </summary>
            <param name="source">A string de onde será retirado o trecho.</param>
            <param name="before">O delimitador final da string.</param>
            <param name="throwError">Se deve lançar exceção caso não localiza a string definida em before.</param>
            <returns>O trecho da string antes de before.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.SubstringBefore(System.String,System.String)">
            <summary>
            Retorna o trecho da string anterior a before.
            </summary>
            <param name="source">A string de onde será retirado o trecho.</param>
            <param name="before">O delimitador final da string.</param>
            <returns>O trecho da string antes de before.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.SubstringBetween(System.String,System.String,System.String)">
            <summary>
            Retorna o trecho da string entre firstDelimiter e secondDelimiter.
            </summary>
            <param name="source">A string de onde será retirado o trecho.</param>
            <param name="firstDelimiter">O primeiro delimitador do trecho da string.</param>
            <param name="secondDelimiter">O segundo delimitador do trecho da string.</param>
            <returns>O trecho da string entre os delimitadores.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.SubstringBetween(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Retorna o trecho da string entre firstDelimiter e secondDelimiter.
            </summary>
            <param name="source">A string de onde será retirado o trecho.</param>
            <param name="firstDelimiter">O primeiro delimitador do trecho da string.</param>
            <param name="secondDelimiter">O segundo delimitador do trecho da string.</param>
            <param name="removeStringDelimiters">Define se os delimitadores devem permanecer na string retornada.</param>
            <returns>O trecho da string entre os delimitadores.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.SubstringAfter(System.String,System.String)">
            <summary>
            Retorna o trecho da string depois de after.
            </summary>
            <param name="source">A string de onde será retirado o trecho.</param>
            <param name="after">O delimitador inicial da string.</param>
            <returns>O trecho da string antes de before.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.Join(System.Collections.ICollection)">
            <summary>
            Faz a união dos itens de uma coleção numa string.
            Utiliza "," como separador dos itens.
            </summary>
            <param name="collection">Os itens a serem unidos numa string.</param>
            <returns>A string com os itens unidos.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.JoinWords(System.Collections.ICollection)">
            <summary>
            Joins the words.
            </summary>
            <returns>The words.</returns>
            <param name="collection">Collection.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.Join(System.Collections.ICollection,System.String)">
            <summary>
            Faz a união dos itens de uma coleção numa string.
            Utiliza "," como separador dos itens.
            </summary>
            <param name="collection">Os itens a serem unidos numa string.</param>
            <param name="separator">Separador utilizado entre os itens.</param>
            <returns>A string com os itens unidos.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.Join(System.Collections.ICollection,System.String,System.String)">
            <summary>
            Faz a união dos itens de uma coleção numa string.
            Utiliza "," como separador dos itens.
            </summary>
            <param name="collection">Os itens a serem unidos numa string.</param>
            <param name="separator">Separador utilizado entre os itens.</param>
            <param name="lastSeparator">Separador entre o penúltimo e o último item.</param>
            <returns>A string com os itens unidos.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.HasDifferentChars(System.String)">
            <summary>
            Verifica se a string possui caracteres diferentes ou toda a string possui o mesmo caracter.
            </summary>
            <remarks>
            Por exemplo, se a string for "aaaaaa" retornará true, mas se a string for "aaabaaa" retornará false.
            </remarks>
            <param name="source">A string a ser avaliada.</param>
            <returns>True se possui caracteres diferentes, false no contrário.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.StringHelper.GetSimilarity(System.String,System.String)">
            <summary>
            Gets the similarity between two strings.
            <remarks>
            Identical strings have 1f similarity.
            </remarks>
            </summary>
            <returns>
            The similarity.
            </returns>
            <param name='string1'>
            String1.
            </param>
            <param name='string2'>
            String2.
            </param>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Text.Spelling.ISpellingProvider">
            <summary>
            Defines a spelling provider.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.Spelling.ISpellingProvider.Initialize">
            <summary>
            Initialize this instance.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.Spelling.ISpellingProvider.GetCorrect(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the correct version of the text.
            </summary>
            <returns>The correct text..</returns>
            <param name="text">Text.</param>
            <param name="culture">Culture.</param>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Text.Spelling.SpellingService">
            <summary>
            Spelling service.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.Spelling.SpellingService.Initialize(Skahal.Infrastructure.Framework.Text.Spelling.ISpellingProvider)">
            <summary>
            Initialize the service usigng the specified provider.
            </summary>
            <param name="provider">Provider.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.Spelling.SpellingService.Initialize">
            <summary>
            Initialize this instance.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.Spelling.SpellingService.GetCorrect(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the correct text.
            </summary>
            <returns>The correct.</returns>
            <param name="text">Text.</param>
            <param name="culture">Culture.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.Spelling.SpellingService.GetCorrect(System.String)">
            <summary>
            Gets the correct text.
            </summary>
            <returns>The correct.</returns>
            <param name="text">Text.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.Spelling.SpellingService.IsCorrect(System.String,System.Globalization.CultureInfo)">
            <summary>
            Determines if is correct the specified text.
            </summary>
            <returns><c>true</c> if is correct the specified text culture; otherwise, <c>false</c>.</returns>
            <param name="text">Text.</param>
            <param name="culture">Culture.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Text.Spelling.SpellingService.IsCorrect(System.String)">
            <summary>
            Determines if is correct the specified text.
            </summary>
            <returns><c>true</c> if is correct the specified text; otherwise, <c>false</c>.</returns>
            <param name="text">Text.</param>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNService">
            <summary>
            Social Gaming Network service.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNService.Initialize(Skahal.Infrastructure.Framework.SocialGamingNetwork.ISGNFactory)">
            <summary>
            Initialize the specified factory.
            </summary>
            <param name="factory">Factory.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNService.Initialized">
            <summary>
            Gets a value indicating whether this <see cref="T:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNService"/>
            is initialized.
            </summary>
            <value><c>true</c> if initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNService.PlayerManager">
            <summary>
            Gets the player manager.
            </summary>
            <value>The player manager.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNService.MultiplayerManager">
            <summary>
            Gets the multiplayer manager.
            </summary>
            <value>The multiplayer manager.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNService.VoiceChatManager">
            <summary>
            Gets the voice chat manager.
            </summary>
            <value>The voice chat manager.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNService.UIManager">
            <summary>
            Gets the user interface manager.
            </summary>
            <value>The user interface manager.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNService.LeaderboardManager">
            <summary>
            Gets the leaderboard manager.
            </summary>
            <value>The leaderboard manager.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.SocialGamingNetwork.SGNService.AchievementManager">
            <summary>
            Gets the achievement manager.
            </summary>
            <value>The achievement manager.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Repositories.MemoryUnitOfWork">
            <summary>
            Defines an in memory unit of work.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.MemoryUnitOfWork.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:Skahal.Infrastructure.Framework.Repositories.MemoryUnitOfWork&lt;TKey&gt;"/> class.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.MemoryUnitOfWork.RegisterAdded(Skahal.Infrastructure.Framework.Domain.IAggregateRoot,Skahal.Infrastructure.Framework.Repositories.IUnitOfWorkRepository)">
            <summary>
            Registers an entity to be added when commited.
            </summary>
            <param name="entity">Entity.</param>
            <param name="repository">Repository.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.MemoryUnitOfWork.RegisterChanged(Skahal.Infrastructure.Framework.Domain.IAggregateRoot,Skahal.Infrastructure.Framework.Repositories.IUnitOfWorkRepository)">
            <summary>
            Registers an entity to be changed when commited.
            </summary>
            <param name="entity">Entity.</param>
            <param name="repository">Repository.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.MemoryUnitOfWork.RegisterRemoved(Skahal.Infrastructure.Framework.Domain.IAggregateRoot,Skahal.Infrastructure.Framework.Repositories.IUnitOfWorkRepository)">
            <summary>
            Registers an entity to be removed when commited.
            </summary>
            <param name="entity">Entity.</param>
            <param name="repository">Repository.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.MemoryUnitOfWork.Commit">
            <summary>
            Commit the registered entities.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.MemoryUnitOfWork.Rollback">
            <summary>
            Undo changes made after the latest commit.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.MemoryUnitOfWork.Get(System.Object)">
            <summary>
            Get the entity which is registered inside the unit of work.
            </summary>
            <param name="key">The entity key.</param>
            <returns>
            The entity instance or null if it is not register.
            </returns>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Collections.CollectionExtensions">
            <summary>
            Extensions methods to collections.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Collections.CollectionExtensions.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the list to this.
            </summary>
            <param name="source">Source.</param>
            <param name="newItems">New items.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Collections.CollectionExtensions.AddRange``1(System.Collections.Generic.IList{``0},``0[])">
            <summary>
            Adds the list to this.
            </summary>
            <param name="source">Source.</param>
            <param name="newItems">New items.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Collections.CollectionExtensions.AddIfNotExists``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Adds if not exists.
            </summary>
            <param name="source">Source.</param>
            <param name="item">Item.</param>
            <typeparam name="TItem">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Collections.CollectionExtensions.Join(System.Collections.ICollection)">
            <summary>
            Faz a união dos itens de uma coleção numa string.
            Utiliza "," como separador dos itens.
            </summary>
            <param name="collection">Os itens a serem unidos numa string.</param>
            <returns>A string com os itens unidos.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Collections.CollectionExtensions.Join(System.Collections.ICollection,System.String)">
            <summary>
            Faz a união dos itens de uma coleção numa string.
            Utiliza "," como separador dos itens.
            </summary>
            <param name="collection">Os itens a serem unidos numa string.</param>
            <param name="separator">Separador utilizado entre os itens.</param>
            <returns>A string com os itens unidos.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Collections.CollectionExtensions.Join(System.Collections.ICollection,System.String,System.String)">
            <summary>
            Faz a união dos itens de uma coleção numa string.
            Utiliza "," como separador dos itens.
            </summary>
            <param name="collection">Os itens a serem unidos numa string.</param>
            <param name="separator">Separador utilizado entre os itens.</param>
            <param name="lastSeparator">Separador entre o penúltimo e o último item.</param>
            <returns>A string com os itens unidos.</returns>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Globalization.GlobalizationExtensions">
            <summary>
            Globalization extensions.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Globalization.GlobalizationExtensions.Translate(System.String,System.Object[])">
            <summary>
            Translate the specified text to the currente language.
            </summary>
            <param name="text">Text.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Globalization.GlobalizationLabel">
            <summary>
            Globalization label.
            </summary>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Globalization.GlobalizationLabel.EnglishText">
            <summary>
            Gets or sets the english text.
            </summary>
            <value>The english text.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Globalization.GlobalizationLabel.CultureText">
            <summary>
            Gets or sets the culture text.
            </summary>
            <value>The culture text.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Globalization.GlobalizationLabel.CultureName">
            <summary>
            Gets or sets the culture code.
            <remarks>
            ISO format: en-US, pt-BR, etc.
            </remarks>
            </summary>
            <value>The culture code.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Globalization.IGlobalizationLabelRepository">
            <summary>
            Defines a interface for globalization label repository.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Globalization.IGlobalizationLabelRepository.LoadCultureLabels(System.String)">
            <summary>
            Loads the culture labels.
            </summary>
            <returns><c>true</c>, if culture labels was loaded, <c>false</c> otherwise, already loaded.</returns>
            <param name="cultureName">Culture name.</param>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Repositories.RepositoryExtensions">
            <summary>
            Repository extensions.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryExtensions.FindAll``1(Skahal.Infrastructure.Framework.Repositories.IRepository{``0})">
            <summary>
            Finds all entities.
            </summary>
            <returns>The found entities.</returns>
            <param name="repository">Repository.</param>
            <param name="filter">Filter.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryExtensions.FindAll``1(Skahal.Infrastructure.Framework.Repositories.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Finds all entities that matches the filter.
            </summary>
            <returns>The found entities.</returns>
            <param name="repository">Repository.</param>
            <param name="filter">Filter.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryExtensions.FindAll``1(Skahal.Infrastructure.Framework.Repositories.IRepository{``0},System.Int32,System.Int32)">
            <summary>
            Finds all entities.
            </summary>
            <returns>The found entities.</returns>
            <param name="repository">Repository.</param>
            <param name="offset">Offset.</param>
            <param name="limit">Limit.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryExtensions.FindAll``1(Skahal.Infrastructure.Framework.Repositories.IRepository{``0},System.Int32,System.Int64)">
            <summary>
            Finds all entities.
            </summary>
            <returns>The found entities.</returns>
            <param name="repository">Repository.</param>
            <param name="offset">Offset.</param>
            <param name="limit">Limit.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryExtensions.FindAllAscending``2(Skahal.Infrastructure.Framework.Repositories.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Finds all entities  in a ascending order
            </summary>
            <returns>The found entities.</returns>
            <param name="repository">The repository.</param>
            <param name="orderBy">The order.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryExtensions.FindAllAscending``2(Skahal.Infrastructure.Framework.Repositories.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Finds all entities that matches the filter in a ascending order
            </summary>
            <returns>The found entities.</returns>
            <param name="repository">The repository.</param>
            <param name="filter">The filter.</param>
            <param name="orderBy">The order.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryExtensions.FindAllAscending``2(Skahal.Infrastructure.Framework.Repositories.IRepository{``0},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Finds all entities in a ascending order
            </summary>
            <returns>The found entities.</returns>
            <param name="repository">Repository.</param>
            <param name="offset">Offset.</param>
            <param name="limit">Limit.</param>
            <param name="orderBy">The order.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryExtensions.FindAll``2(Skahal.Infrastructure.Framework.Repositories.IRepository{``0},System.Int32,System.Int64,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Finds all entities in a ascending order
            </summary>
            <returns>The found entities.</returns>
            <param name="repository">Repository.</param>
            <param name="offset">Offset.</param>
            <param name="limit">Limit.</param>
            <param name="orderBy">The order.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryExtensions.FindAllDescending``2(Skahal.Infrastructure.Framework.Repositories.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Finds all entities  in a descending order
            </summary>
            <returns>The found entities.</returns>
            <param name="repository">The repository.</param>
            <param name="orderBy">The order.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryExtensions.FindAllDescending``2(Skahal.Infrastructure.Framework.Repositories.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Finds all entities that matches the filter in a descending order
            </summary>
            <returns>The found entities.</returns>
            <param name="repository">The repository.</param>
            <param name="filter">The filter.</param>
            <param name="orderBy">The order.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryExtensions.FindAllDescending``2(Skahal.Infrastructure.Framework.Repositories.IRepository{``0},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Finds all entities in a descending order
            </summary>
            <returns>The found entities.</returns>
            <param name="repository">Repository.</param>
            <param name="offset">Offset.</param>
            <param name="limit">Limit.</param>
            <param name="orderBy">The order.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryExtensions.FindAllDescending``2(Skahal.Infrastructure.Framework.Repositories.IRepository{``0},System.Int32,System.Int64,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Finds all entities in a descending order
            </summary>
            <returns>The found entities.</returns>
            <param name="repository">Repository.</param>
            <param name="offset">Offset.</param>
            <param name="limit">Limit.</param>
            <param name="orderBy">The order.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryExtensions.CountAll``1(Skahal.Infrastructure.Framework.Repositories.IRepository{``0})">
            <summary>
            Counts all entities.
            </summary>
            <param name="repository">Repository.</param>
            <returns>The number of the entities that matches the filter.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryExtensions.FindFirst``1(Skahal.Infrastructure.Framework.Repositories.IRepository{``0})">
            <summary>
            Finds the first entity.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="repository">The repository.</param>
            <returns>The first entity.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryExtensions.FindFirst``1(Skahal.Infrastructure.Framework.Repositories.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Finds the first entity that match the filter.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="repository">The repository.</param>
            <param name="filter">The filter.</param>
            <returns>The first entity that match the filter or null if none match.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryExtensions.FindFirstAscending``2(Skahal.Infrastructure.Framework.Repositories.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Finds the first entity that match the filter in an ascending order.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="repository">The repository.</param>
            <param name="filter">The filter.</param>
            <param name="orderBy">The order.</param>
            <returns>The first entity that match the filter or null if none match.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryExtensions.FindFirstDescending``2(Skahal.Infrastructure.Framework.Repositories.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Finds the first entity that match the filter in an descending order.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="repository">The repository.</param>
            <param name="filter">The filter.</param>
            <param name="orderBy">The order.</param>
            <returns>The first entity that match the filter or null if none match.</returns>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.RepositoryExtensions.FindLast``1(Skahal.Infrastructure.Framework.Repositories.IRepository{``0})">
            <summary>
            Finds the last entity.
            </summary>
            <returns>The last entity.</returns>
            <param name="repository">Repository.</param>
            <typeparam name="TEntity">The 1st type parameter.</typeparam>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Globalization.MemoryGlobalizationLabelRepository">
            <summary>
            An in-memory globalization label repository.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Globalization.MemoryGlobalizationLabelRepository.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Skahal.Infrastructure.Framework.Globalization.MemoryGlobalizationLabelRepository"/> class.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Globalization.MemoryGlobalizationLabelRepository.LoadCultureLabels(System.String)">
            <summary>
            Loads the culture labels.
            </summary>
            <returns><c>true</c>, if culture labels was loaded, <c>false</c> otherwise, already loaded.</returns>
            <param name="cultureName">Culture name.</param>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Repositories.EntityRepositoryPair">
            <summary>
            Entity repository pair.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Repositories.EntityRepositoryPair.#ctor(Skahal.Infrastructure.Framework.Repositories.UnitOfWorkEntity,Skahal.Infrastructure.Framework.Repositories.IUnitOfWorkRepository)">
            <summary>
            Initializes a new instance of the
            <see cref="!:Skahal.Infrastructure.Framework.Repositories.EntityRepositoryPair&lt;TKey&gt;"/> class.
            </summary>
            <param name="entity">Entity.</param>
            <param name="repository">Repository.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Repositories.EntityRepositoryPair.Entity">
            <summary>
            Gets or sets the entity.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Repositories.EntityRepositoryPair.Repository">
            <summary>
            Gets or sets the repository.
            </summary>
            <value>The repository.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Domain.ServiceBase`3">
            <summary>
            A domain service base class.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Domain.ServiceBase`3.#ctor">
            <summary>
            Initializes a new instance of the Skahal.Infrastructure.Framework.Domain.ServiceBase/> class.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Domain.ServiceBase`3.#ctor(`1,`2)">
            <summary>
            Initializes a new instance of the Skahal.Infrastructure.Framework.Domain.ServiceBase/> class.
            </summary>
            <param name="eventRepository">Event repository.</param>
            <param name="unitOfWork">Unit of work.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Domain.ServiceBase`3.MainRepository">
            <summary>
            Gets the main repository.
            </summary>
            <value>The main repository.</value>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.Domain.ServiceBase`3.UnitOfWork">
            <summary>
            Gets the unit of work.
            </summary>
            <value>The unit of work.</value>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Globalization.TextGlobalizationLabelRepositoryBase">
            <summary>
            Text globalization label repository base class.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Globalization.TextGlobalizationLabelRepositoryBase.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Skahal.Infrastructure.Framework.Globalization.TextGlobalizationLabelRepositoryBase"/> class.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Globalization.TextGlobalizationLabelRepositoryBase.LoadCultureLabels(System.String)">
            <summary>
            Loads the culture labels.
            </summary>
            <returns>true</returns>
            <c>false</c>
            <param name="cultureName">Culture name.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Globalization.TextGlobalizationLabelRepositoryBase.GetCultureText(System.String)">
            <summary>
            Gets the culture text.
            </summary>
            <returns>The culture text.</returns>
            <param name="cultureName">Culture name.</param>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.Globalization.FileGlobalizationLabelRepository">
            <summary>
            A TextGlobalizationLabelRepositoryBase using file.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Globalization.FileGlobalizationLabelRepository.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Skahal.Infrastructure.Framework.Globalization.FileGlobalizationLabelRepository"/> class.
            </summary>
            <param name="filesDirectory">The files directory.</param>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.Globalization.FileGlobalizationLabelRepository.GetCultureText(System.String)">
            <summary>
            Gets the culture text.
            </summary>
            <returns>The culture text.</returns>
            <param name="cultureName">Culture name.</param>
        </member>
        <member name="T:Skahal.Infrastructure.Framework.IO.FileSystem">
            <summary>
            File system.
            </summary>
        </member>
        <member name="M:Skahal.Infrastructure.Framework.IO.FileSystem.Initialize(System.IO.Abstractions.IFileSystem)">
            <summary>
            Initialize the file system.
            </summary>
            <param name="fileSystem">File system.</param>
        </member>
        <member name="P:Skahal.Infrastructure.Framework.IO.FileSystem.Current">
            <summary>
            Gets the current  file system.
            </summary>
            <value>The current.</value>
        </member>
    </members>
</doc>
